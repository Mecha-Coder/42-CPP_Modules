Before we began, we discussed the project's purpose, problem, and solution to assess his understanding. Next, I checked for norm violations but found none. We then proceeded directly to the code explanation. Jian Shin explained how he handled errors, initialized the simulation, and executed it. After that, I ensured no background programs were running and tested the code according to the evaluation sheet. However, his log was inconsistentâ€”the philosopher unexpectedly died when it was not supposed to. Upon reviewing his code again, I found that there was no deadlock protection. Since he was close to BLACKHOLE, I allowed him to make the necessary changes to fix it. Note: I only explained the concept of deadlock prevention, the code was entirely written by him. After incorporating these changes, the code became consistent. I revalidated everything and confirmed that it worked as intended according to the evaluation sheet. However, there are still areas for improvement. 1) Use better data strucute to represent philo: spiral linked list -> struct array. 2) Timestamp Calculation: The first log time should be zero (current_time - start_time). 3) Delay Accuracy: implementing a custom usleep() function. One notable strength of his implementation was the start_lock, which ensures that all philos are initialized before the simulation begins. Since everything was functioning correctly, I proceeded to pass his Philosopher project.


